<?php

/**
 * @file
 * This module provides a tray that can be used as an application bar
 */

define('TRAY_MODULE_PATH', drupal_get_path('module', 'tray'));

/**
 * Implements hook_init().
 */
function tray_init() {
  drupal_add_css(TRAY_MODULE_PATH . '/tray.css');
  
  $settings = array(
      'trayPath' => 'tray/load'
  );

  drupal_add_js(array('tray' => $settings), 'setting');
  drupal_add_js(TRAY_MODULE_PATH . '/tray.js');
}


/**
 * Implements hook_page_alter().
 */
function tray_page_alter(&$page) {
  if(user_access('access tray') && sizeof(block_list('tray')) > 0) {
    $page['page_bottom']['tray'] = array(
      '#type' => 'markup',
      '#markup' => theme('tray_display'),
    );
  }
}

/**
 * Implements hook_permission().
 */
function tray_permission() {
  return array(
    'access tray' => array(
      'title' => t('Access Tray'), 
      'description' => t('View and use the Tray.'),
    ),
    'administer tray' => array(
      'title' => t('Administer the Tray'),
      'description' => t('Administer the Tray.'),
    ),
  );

}

/**
 * Menu item access callback - only admin or enabled themes can be accessed
 */
function _tray_themes_access($theme) {
  return user_access('administer tray') && ($theme->status || $theme->name == variable_get('admin_theme', '0'));
}

/**
 * Implements hook_menu().
 */
function tray_menu() {
  $items = array();
  
  $items['tray/load/%'] = array(
    'title' => t('Get block content'),
    'page callback' => 'tray_ajax_callback',
    'page arguments' => array(2),
    'access arguments' => array('access tray'),
      'type' => MENU_CALLBACK
  );
  
  return $items;
}

/**
 * Implements hook_theme().
 */
function tray_theme() {
  return array(
    'tray_display' => array(
      'file' => 'tray.theme.inc',
    ),
    'tray_block_full' => array(
      'variables' => array('block' => NULL, 'options' => NULL),
      'file' => 'tray.theme.inc',
    ),
    'tray_block_handle' => array(
      'variables' => array('block' => NULL, 'options' => NULL),
      'file' => 'tray.theme.inc',
    ),
  );
}

/**
 * Implements hook_system_info_alter().
 */
function tray_system_info_alter(&$info, $file){
  global $custom_theme;

  // If non-default theme configuration has been selected, set the custom theme.
  $custom_theme = isset($theme) ? $theme : variable_get('theme_default', 'garland');
  
  // Adds a new region to the current theme.
  if($file->name == $custom_theme){
    $info['regions'] = array_merge($info['regions'],  array('tray' => t('Tray')));
  } 
  
}

/**
 * Implements hook_form_alter().
**/
function tray_form_alter(&$form, &$form_state, $form_id) {
  
  if($form_id == 'block_admin_configure') {
    
    $block->module = $form['module']['#value'];
    $block->delta = $form['delta']['#value'];
      
    if ($block->module && ($block->delta || $block->delta === 0)) {
      $block_name = $block->module .'_'. $block->delta;
    }
    
    if (!isset($form['block_settings']['#weight'])) {
      $form['block_settings']['#weight'] = -1;
    }
    
    $form['tray_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Tray settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => 0
    );
    
    $form['tray_settings']['tray_display_type'] = array(
      '#type'          => 'radios',
      '#title'         => t('Display type'),
      '#default_value' => variable_get('tray_display_type_'.$block_name, 'handle'),
      '#description'   => t('Choose the display type for this block when it is placed in the tray'),
      '#options'       => array(
        'handle' => 'Handle',
        'full' => 'Full Block',
      ),
    );
    
    $form['tray_settings']['tray_display_position'] = array(
      '#type'          => 'radios',
      '#title'         => t('Position'),
      '#default_value' => variable_get('tray_display_position_'.$block_name, 'left'),
      '#options'       => array(
        'left' => 'Left',
        'right' => 'Right',
      ),
    );
    
    $form['tray_settings']['tray_ajax_enabled'] = array(
      '#title' => t('Use AJAX'),
      '#type' => 'checkbox',
      '#description' => t('If checked, the content of the block will be loaded only when the handle is clicked and not at page load.'),
      '#default_value' => variable_get('tray_ajax_enabled_'.$block_name, 0),
    );
            
   $form['#validate'][] = 'tray_validate';
   
  }
  
}

/**
 * Implementation of hook_validation()
**/
function tray_validate($form, &$form_state) {
  if ($form_state['values']['form_id'] == 'block_admin_configure') {
    if (user_access('administer blocks')) {
      
      $module = arg(4);
      $delta = arg(5);
      
      $options = array(
        'type' => $form_state['values']['tray_display_type'],
        'ajax' => $form_state['values']['tray_ajax_enabled'],
        'position' => $form_state['values']['tray_display_position'],
      );
      
      if ($module && ($delta || $delta === 0)) {
        $block_name = $module .'_'. $delta;
        _tray_display_type_save($block_name,$options);
      }
    }
  }
  block_admin_configure_validate($form, $form_state);
}

/**
 * Saves the display type for blocks
 */
function _tray_display_type_save($block_name , $options){
  variable_set('tray_display_position_'.$block_name , $options['position']);
  variable_set('tray_ajax_enabled_'.$block_name , $options['ajax']);
  variable_set('tray_display_type_'.$block_name , $options['type']);
}

/**
 * Ajax callback to get block content
 */
function tray_ajax_callback($bid) {
  $result = db_query('SELECT module, delta FROM {block} WHERE bid = :bid', array(':bid' => $bid));
  $data = $result->fetchObject();
  $blocks = block_list('tray');
  $block = $blocks[$data->module . '_' . $data->delta];
  
  $renderable_block=  _block_get_renderable_array(array($block));
  //we don't need the block title in the content so let's unset this here
  $renderable_block[0]['#block']->subject = '';
  $output['content'] = drupal_render($renderable_block);
  
  echo drupal_json_output($output);
}
